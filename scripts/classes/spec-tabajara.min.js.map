{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/specificity/specificity.js","scripts/classes/spec-tabajara.js"],"names":[],"mappingslJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"spec-tabajara.min.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Calculates the specificity of CSS selectors\n * http://www.w3.org/TR/css3-selectors/#specificity\n *\n * Returns an array of objects with the following properties:\n *  - selector: the input\n *  - specificity: e.g. 0,1,0,0\n *  - parts: array with details about each part of the selector that counts towards the specificity\n */\nvar SPECIFICITY = (function() {\n\tvar calculate,\n\t\tcalculateSingle;\n\n\tcalculate = function(input) {\n\t\tvar selectors,\n\t\t\tselector,\n\t\t\ti,\n\t\t\tlen,\n\t\t\tresults = [];\n\n\t\t// Separate input by commas\n\t\tselectors = input.split(',');\n\n\t\tfor (i = 0, len = selectors.length; i < len; i += 1) {\n\t\t\tselector = selectors[i];\n\t\t\tif (selector.length > 0) {\n\t\t\t\tresults.push(calculateSingle(selector));\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t};\n\n\t// Calculate the specificity for a selector by dividing it into simple selectors and counting them\n\tcalculateSingle = function(input) {\n\t\tvar selector = input,\n\t\t\tfindMatch,\n\t\t\ttypeCount = {\n\t\t\t\t'a': 0,\n\t\t\t\t'b': 0,\n\t\t\t\t'c': 0\n\t\t\t},\n\t\t\tparts = [],\n\t\t\t// The following regular expressions assume that selectors matching the preceding regular expressions have been removed\n\t\t\tattributeRegex = /(\\[[^\\]]+\\])/g,\n\t\t\tidRegex = /(#[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\tclassRegex = /(\\.[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\tpseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi,\n\t\t\t// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()\n\t\t\tpseudoClassWithBracketsRegex = /(:[\\w-]+\\([^\\)]*\\))/gi,\n\t\t\t// A regex for other pseudo classes, which don't have brackets\n\t\t\tpseudoClassRegex = /(:[^\\s\\+>~\\.\\[:]+)/g,\n\t\t\telementRegex = /([^\\s\\+>~\\.\\[:]+)/g;\n\n\t\t// Find matches for a regular expression in a string and push their details to parts\n\t\t// Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements\n\t\tfindMatch = function(regex, type) {\n\t\t\tvar matches, i, len, match, index, length;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\ttypeCount[type] += 1;\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tindex = selector.indexOf(match);\n\t\t\t\t\tlength = match.length;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\tselector: match,\n\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tlength: length\n\t\t\t\t\t});\n\t\t\t\t\t// Replace this simple selector with whitespace so it won't be counted in further simple selectors\n\t\t\t\t\tselector = selector.replace(match, Array(length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument\n\t\t(function() {\n\t\t\tvar regex = /:not\\(([^\\)]*)\\)/g;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tselector = selector.replace(regex, '     $1 ');\n\t\t\t}\n\t\t}());\n\n\t\t// Remove anything after a left brace in case a user has pasted in a rule, not just a selector\n\t\t(function() {\n\t\t\tvar regex = /{[^]*/gm,\n\t\t\t\tmatches, i, len, match;\n\t\t\tif (regex.test(selector)) {\n\t\t\t\tmatches = selector.match(regex);\n\t\t\t\tfor (i = 0, len = matches.length; i < len; i += 1) {\n\t\t\t\t\tmatch = matches[i];\n\t\t\t\t\tselector = selector.replace(match, Array(match.length + 1).join(' '));\n\t\t\t\t}\n\t\t\t}\n\t\t}());\n\n\t\t// Add attribute selectors to parts collection (type b)\n\t\tfindMatch(attributeRegex, 'b');\n\n\t\t// Add ID selectors to parts collection (type a)\n\t\tfindMatch(idRegex, 'a');\n\n\t\t// Add class selectors to parts collection (type b)\n\t\tfindMatch(classRegex, 'b');\n\n\t\t// Add pseudo-element selectors to parts collection (type c)\n\t\tfindMatch(pseudoElementRegex, 'c');\n\n\t\t// Add pseudo-class selectors to parts collection (type b)\n\t\tfindMatch(pseudoClassWithBracketsRegex, 'b');\n\t\tfindMatch(pseudoClassRegex, 'b');\n\n\t\t// Remove universal selector and separator characters\n\t\tselector = selector.replace(/[\\*\\s\\+>~]/g, ' ');\n\n\t\t// Remove any stray dots or hashes which aren't attached to words\n\t\t// These may be present if the user is live-editing this selector\n\t\tselector = selector.replace(/[#\\.]/g, ' ');\n\n\t\t// The only things left should be element selectors (type c)\n\t\tfindMatch(elementRegex, 'c');\n\n\t\t// Order the parts in the order they appear in the original selector\n\t\t// This is neater for external apps to deal with\n\t\tparts.sort(function(a, b) {\n\t\t\treturn a.index - b.index;\n\t\t});\n\n\t\treturn {\n\t\t\tselector: input,\n\t\t\tspecificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),\n\t\t\tparts: parts\n\t\t};\n\t};\n\n\treturn {\n\t\tcalculate: calculate\n\t};\n}());\n\n// Export for Node JS\nif (typeof exports !== 'undefined') {\n\texports.calculate = SPECIFICITY.calculate;\n}\n","var spec = require('specificity'),\n\n    SpecificatorTabajara = function(inputEl, outputAEl, outputBEl,\n      outputCEl, buttonEl) {\n      this.inputEl = inputEl;\n      this.outputAEl = outputAEl;\n      this.outputBEl = outputBEl;\n      this.outputCEl = outputCEl;\n      this.buttonEl = buttonEl;\n    };\n\n// attaches the event handlers\nSpecificatorTabajara.prototype.start = function() {\n  var specificator = this;\n  this.buttonEl.onclick = function() {\n    specificator.calculate();\n  };\n};\n\nSpecificatorTabajara.prototype.calculate = function() {\n  // gets the value from the input\n  var input = this.inputEl.value,\n      result = spec.calculate(input)[0],\n      specificity;\n\n  if (result && result.specificity) {\n    result = result.specificity.split(',');\n  } else {\n    result = [0, 0, 0, 0];\n  }\n\n  // sets the value of the 3 outputs\n  this.outputAEl.innerHTML = result[1];\n  this.outputBEl.innerHTML = result[2];\n  this.outputCEl.innerHTML = result[3];\n};\n\n\nvar options = {\n  input: 'spec-tabajara-input',\n  output: [\n    'spec-tabajara-output-a',\n    'spec-tabajara-output-b',\n    'spec-tabajara-output-c'],\n  button: 'spec-tabajara-button'\n  },\n  inputEl = document.getElementById(options.input);\n\nif (inputEl) {\n  new SpecificatorTabajara(\n    inputEl,\n    document.getElementById(options.output[0]),\n    document.getElementById(options.output[1]),\n    document.getElementById(options.output[2]),\n    document.getElementById(options.button)\n  ).start();\n}\n"]}